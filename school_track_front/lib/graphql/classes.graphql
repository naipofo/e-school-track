# import './fragments.graphql'

query ClassesList {
  classes {
    id
    group {
      name
      user_groups_aggregate {
        aggregate {
          count
        }
      }
    }
    subject {
      title
    }
  }
}

query ClassDetail($id: Int!, $events_after: date!) {
  class: classes_by_pk(id: $id) {
    subject {
      title
    }
    group {
      name
      user_groups_aggregate {
        aggregate {
          count
        }
      }
    }
    grades_aggregate {
      aggregate {
        avg {
          value
        }
        count
      }
    }
    events(order_by: { date: asc }, where: { date: { _gt: $events_after } }) {
      ...eventCardData
    }
  }
}

subscription ClassGrades($id: Int!) {
  class: classes_by_pk(id: $id) {
    subject {
      title
    }
    group {
      name
      user_groups {
        user {
          id
          full_name
          grades(where: { class_id: { _eq: $id } }) {
            ...gradeChipData
          }
        }
      }
    }
  }
}

query ClassAttendace($class_id: Int!, $date: date!) {
  class: classes_by_pk(id: $class_id) {
    subject {
      title
    }
    group {
      name
      user_groups {
        user {
          id
          full_name
          attendances(
            where: { class_id: { _eq: $class_id }, date: { _eq: $date } }
          ) {
            type
          }
        }
      }
    }
  }
}

mutation InsertAttendance($att: [attendance_insert_input!]!) {
  insert_attendance(
    objects: $att
    on_conflict: {
      constraint: attendance_student_id_date_period_id_key
      update_columns: type
    }
  ) {
    affected_rows
    returning {
      id
    }
  }
}

query StudentClassDetails($id: Int!, $events_after: date!) {
  class: classes_by_pk(id: $id) {
    subject {
      title
    }
    teacher {
      full_name
    }
    grades {
      ...gradeChipData
    }
    events(order_by: { date: asc }, where: { date: { _gt: $events_after } }) {
      ...eventCardData
    }
  }
}
